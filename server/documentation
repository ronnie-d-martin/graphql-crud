GraphQL is a query language for APIs and a runtime for handling those queries. It lets clients request exactly the data they need, nothing more and nothing less.

In simpler terms:
GraphQL is a way to interact with APIs that allows us get what exactly data we need or para makuha natin yung eksaktong data na kailangan natin. 
It provides a flexible and efficient alternative to traditional REST APIs. dahil kapag nag request ka ng data kay rest apis ire-return niya sayo ung buong properties
niya unlike in graphql you can Malaya mag declare kung ano fields or properties lang yung ire-return mo sa api.

to give you an Analogy parang pag-order restaurant.
Sa REST, minsan pinapadala sa'yo ang buong menu kahit adobo lang gusto mo.
Sa GraphQL, ikaw mismo ang nagsasabi: "Pahingi po ng adobo at isang serving ng kanin.
"At yun lang ang ibibigay ng server. Unlike REST, where you might get too much, GraphQL lets you specify exactly what fields you want. 

sa pag process naman ng order mo dito na pumasok si apollo client and apollo server, si Apollo Client ay parang waiter na nag-oorder para sa customer and sinabi niya request mo kay apollo server. 
si apollo server naman nag sisilbi siyang Kusinero, siya naman yung nag hahandle ng mga graqhQl quiries and mutation sa backend side. siya ung nag hahanda ng tamang data Ayun sa order ni customer.

Apollo Server is an open-source GraphQL server that works with any GraphQL schema and allows you to define, fetch, and serve data using GraphQL queries.
It acts as a middleware between the client and your data sources (like databases, REST APIs, or other services).
Think of it as the backend part of a GraphQL stack.

Apollo Client is a JavaScript library used to interact with a GraphQL API from the frontend. It manages fetching, caching, and updating data in your UI.
Itâ€™s commonly used with frameworks like React, Vue, or Angular, and it works hand-in-hand with Apollo Server (but can also be used with any GraphQL API).

ðŸ”¹ How It Works:
The client (e.g., a React app) sends a request specifying the exact data it wants.
The server responds with just that dataâ€”no extra fields, no missing data.

1. in server npm init --yes; npm pkg set type="module"
-inititalize Node.js project
-allows to use import and export instead of require and module.exports

2. npm install @apollo/server graphql - pagkage
Apollo Server package, which allows you to create a GraphQL server in Node.js
GraphQL works in JavaScript. to executes graphql queries.

3. Entry point server.js

import { ApolloServer} from '@apollo/server' 
import { startStandaloneServer } from '@apollo/server/standalone'

ApolloServer â†’ This is the main class used to create a GraphQL server.
startStandaloneServer â†’ This is a helper function that starts the server without needing Express or other frameworks. It handles CORS, body parsing, and other server configurations.

const server = new ApolloServer({})

const { url } = await startStandaloneServer(server, {
    listen: { port: 4000 },
});

console.log(`Server Running at: ${url}`);

startStandaloneServer(server) starts the server without needing Express or other frameworks.

After the server starts, it logs the URL where it's running.

GraphQL Core Elements
GraphQL has two main operations:
The typeDefs define the GraphQL schema. It describes what data clients can request and modify.
Query (Fetching Data)
A query is used to fetch data from the server, similar to a GET request in REST APIs.
Mutation (Modifying Data)
A mutation is used to modify data on the server, like POST, PUT, or DELETE in REST APIs.
const typeDefs = `
    type User {
        id: ID
        name: String
        age: Int
        isMarried: Boolean
    }

    type Query {
        getUsers: [User]
        getUserById(id: ID!): User
    }

    type Mutation {
        createUser(name: String!,age: Int!,isMarried: Boolean!): User
    }
`
Resolvers are functions that helps Retrieve requested data for queries and Modify existing data for mutations.
it Connect queries/mutations with data sources (e.g., databases, APIs, in-memory storage).
interact with datasource and deal with the data.

const users = [
    { id: "1", name: "John Doe", age: 30, isMarried: true },
    { id: "2", name: "Jane Smith", age: 25, isMarried: false },
    { id: "3", name: "Alice Johnson", age: 28, isMarried: false },
];

const resolvers = {
    Query: {
        getUsers: () => { return users },
        getUserById: (_, args) => {
            const id = args.id;
            console.log(`Fetching user with id: ${id}`); 
            const user = users.find(user => user.id === id);
            console.log(`Found user: ${JSON.stringify(user)}`); 
            return user;
        }
    },
    Mutation: {
        createUser: (_, args) => {
            const { name, age, isMarried } = args;
            const newUser = {
                id: (users.length + 1).toString(),
                name,
                age,
                isMarried,
            }
            users.push(newUser);
            console.log('New user created:', newUser);
            return newUser;
        }
    }
}
